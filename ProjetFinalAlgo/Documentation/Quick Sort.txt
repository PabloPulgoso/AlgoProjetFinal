L'algorithme QuickSort est un algorithme de tri très efficace qui suit la stratégie de diviser pour régner (divide and conquer). Il trie un tableau ou une liste en divisant récursivement le tableau en sous-tableaux plus petits, puis en les réorganisant pour que chaque sous-tableau soit trié. Voici une explication détaillée de son fonctionnement 

### Principe de QuickSort 

1. Choisir un pivot  
   - Un élément du tableau est choisi comme pivot. Dans l'implémentation donnée dans ton code, c'est généralement l'élément le plus à droite du tableau (mais cela peut être un élément quelconque du tableau, comme le premier, un élément au hasard, ou le médian).
   
2. Partitionner le tableau 
   - Le tableau est réarrangé de manière à ce que tous les éléments inférieurs ou égaux au pivot se retrouvent avant lui, et tous les éléments supérieurs au pivot se retrouvent après lui. 
   - Le processus de partitionnement crée deux sous-tableaux  un à gauche (les éléments inférieurs ou égaux au pivot) et un à droite (les éléments supérieurs au pivot).
   - Une fois que le tableau est partitionné, l'élément pivot se trouve à sa position finale correcte dans le tableau trié (c'est-à-dire qu'il est à sa place définitive).

3. Appel récursif sur les sous-tableaux 
   - QuickSort est ensuite appelé récursivement sur les deux sous-tableaux, à gauche et à droite du pivot. Le même processus est appliqué à chaque sous-tableau, divisant à nouveau et réarrangeant les éléments autour de nouveaux pivots, jusqu'à ce que chaque sous-tableau soit réduit à une taille de 1 (c'est-à-dire un seul élément, ce qui signifie que le sous-tableau est déjà trié).

### Détail étape par étape 

1. Sélection du pivot  
   - Choisir un pivot est une étape clé, car un mauvais choix de pivot (par exemple, choisir systématiquement l'élément le plus petit ou le plus grand) peut rendre l'algorithme moins efficace, menant à une complexité de O(n²) dans le pire des cas. Dans la pratique, un pivot est souvent choisi de manière aléatoire ou comme le médian de trois éléments pour améliorer les performances dans le cas moyen.

2. Partitionnement 
   - L'idée est de réarranger le tableau pour que tous les éléments plus petits que le pivot se trouvent avant lui, et ceux qui sont plus grands se trouvent après lui.
   - Cela se fait en utilisant deux indices (`i` et `j` dans le code) 
     - `i` est un indice qui suit la frontière des éléments plus petits que le pivot.
     - `j` est l'indice qui parcourt le tableau. Si l'élément à l'indice `j` est inférieur ou égal au pivot, il est échangé avec l'élément à l'indice `i+1`, et `i` est incrémenté.

3. Placement final du pivot 
   - Une fois que l'indice `j` a parcouru tout le tableau, le pivot est échangé avec l'élément à la position `i+1`. À ce moment, le pivot est à sa position correcte dans le tableau trié.

4. Récursion 
   - L'algorithme est appelé récursivement sur les sous-tableaux à gauche et à droite du pivot.
   - Cette récursion continue jusqu'à ce que chaque sous-tableau contienne un seul élément, ce qui signifie qu'il est trié.

### Complexité de l'algorithme 

- Meilleur cas  Cas moyen  La complexité est O(n log n), où `n` est le nombre d'éléments dans le tableau. Ce cas se produit lorsque le pivot choisi divise toujours le tableau en deux parties presque égales.
- Pire cas  La complexité peut être O(n²) si le pivot choisi est toujours le plus petit ou le plus grand élément, entraînant des divisions déséquilibrées du tableau (par exemple, dans un tableau déjà trié ou inversé). Ce cas peut être évité en choisissant un pivot de manière plus intelligente, comme en choisissant un pivot aléatoire ou en utilisant la méthode du médian de trois.
- Espace mémoire  La complexité en espace est généralement O(log n) pour la pile d'appels récursifs, ce qui est assez faible, surtout si l'on choisit un bon pivot.

### Exemple d'exécution avec un tableau simple 

Supposons que nous ayons le tableau suivant à trier  

```
[8, 3, 1, 7, 0, 10, 2, 5]
```

1. Choisir un pivot (par exemple, le dernier élément, ici `5`).
2. Partitionner le tableau en plaçant `5` à sa place correcte 
   - Les éléments plus petits que `5`  `[3, 1, 0, 2]`
   - Les éléments plus grands que `5`  `[8, 7, 10]`
   - Après partitionnement, le tableau devient  `[3, 1, 0, 2, 5, 7, 10, 8]` et `5` est à sa position correcte.

3. Appliquer QuickSort sur les sous-tableaux `[3, 1, 0, 2]` et `[7, 10, 8]` de manière récursive 
   - Sur `[3, 1, 0, 2]`, le pivot choisi pourrait être `2`, et le tableau devient  `[1, 0, 2, 3]`.
   - Sur `[7, 10, 8]`, le pivot choisi pourrait être `8`, et le tableau devient  `[7, 8, 10]`.

4. Après plusieurs appels récursifs et partitions, le tableau est trié  
   
```
[0, 1, 2, 3, 5, 7, 8, 10]
```

### Conclusion 

QuickSort est un algorithme de tri très efficace, avec une complexité de O(n log n) dans la plupart des cas. Il utilise la technique de la partition pour diviser le problème en sous-problèmes plus petits, qu'il résout récursivement. En choisissant un bon pivot, QuickSort peut être très performant même pour des tableaux de grande taille.